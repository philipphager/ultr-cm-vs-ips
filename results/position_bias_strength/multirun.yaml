hydra:
  run:
    dir: /ivi/ilps/personal/sgupta/philipp-project/ultr-cm-vs-ips/results/${experiment.name}
  sweep:
    dir: /ivi/ilps/personal/sgupta/philipp-project/ultr-cm-vs-ips/results/${experiment.name}
    subdir: ${hydra.job.override_dirname}
  launcher:
    submitit_folder: ${hydra.sweep.dir}/.submitit/%j
    timeout_min: 60
    cpus_per_task: 4
    gpus_per_node: null
    tasks_per_node: 1
    mem_gb: 32
    nodes: 1
    name: ${hydra.job.name}
    stderr_to_stdout: false
    _target_: hydra_plugins.hydra_submitit_launcher.submitit_launcher.SlurmLauncher
    partition: gpu
    qos: null
    comment: null
    constraint: null
    exclude: null
    gres: gpu:1
    cpus_per_gpu: null
    gpus_per_task: null
    mem_per_gpu: null
    mem_per_cpu: null
    account: null
    signal_delay_s: 120
    max_num_timeout: 0
    additional_parameters: {}
    array_parallelism: 2
    setup: null
  sweeper:
    _target_: hydra._internal.core_plugins.basic_sweeper.BasicSweeper
    max_batch_size: null
    params: null
  help:
    app_name: ${hydra.job.name}
    header: '${hydra.help.app_name} is powered by Hydra.

      '
    footer: 'Powered by Hydra (https://hydra.cc)

      Use --hydra-help to view Hydra specific help

      '
    template: '${hydra.help.header}

      == Configuration groups ==

      Compose your configuration from those groups (group=option)


      $APP_CONFIG_GROUPS


      == Config ==

      Override anything in the config (foo.bar=value)


      $CONFIG


      ${hydra.help.footer}

      '
  hydra_help:
    template: 'Hydra (${hydra.runtime.version})

      See https://hydra.cc for more info.


      == Flags ==

      $FLAGS_HELP


      == Configuration groups ==

      Compose your configuration from those groups (For example, append hydra/job_logging=disabled
      to command line)


      $HYDRA_CONFIG_GROUPS


      Use ''--cfg hydra'' to Show the Hydra config.

      '
    hydra_help: ???
  hydra_logging:
    version: 1
    formatters:
      simple:
        format: '[%(asctime)s][HYDRA] %(message)s'
    handlers:
      console:
        class: logging.StreamHandler
        formatter: simple
        stream: ext://sys.stdout
    root:
      level: INFO
      handlers:
      - console
    loggers:
      logging_example:
        level: DEBUG
    disable_existing_loggers: false
  job_logging:
    version: 1
    formatters:
      simple:
        format: '[%(asctime)s][%(name)s][%(levelname)s] - %(message)s'
    handlers:
      console:
        class: logging.StreamHandler
        formatter: simple
        stream: ext://sys.stdout
      file:
        class: logging.FileHandler
        formatter: simple
        filename: ${hydra.runtime.output_dir}/${hydra.job.name}.log
    root:
      level: INFO
      handlers:
      - console
      - file
    disable_existing_loggers: false
  env: {}
  mode: MULTIRUN
  searchpath: []
  callbacks: {}
  output_subdir: .
  overrides:
    hydra:
    - hydra/launcher=submitit_slurm
    - hydra.mode=MULTIRUN
    task:
    - data=istella
    - experiment.name=position_bias_strength
    - +experiment=ips_pointwise_unbiased,cm_unbiased
    - simulation.n_sessions=100_000_000
    - simulation.aggregate_clicks=True
    - simulation.simulator.user_model.position_bias=0,0.5,1.0,1.5,2.0
    - random_state=0,1,2,3,4,5,6,7,8,9
  job:
    name: main
    chdir: true
    override_dirname: +experiment=ips_pointwise_unbiased,cm_unbiased,data=istella,experiment.name=position_bias_strength,random_state=0,1,2,3,4,5,6,7,8,9,simulation.aggregate_clicks=True,simulation.n_sessions=100_000_000,simulation.simulator.user_model.position_bias=0,0.5,1.0,1.5,2.0
    id: ???
    num: ???
    config_name: config
    env_set: {}
    env_copy: []
    config:
      override_dirname:
        kv_sep: '='
        item_sep: ','
        exclude_keys: []
  runtime:
    version: 1.2.0
    version_base: '1.2'
    cwd: /home/sgupta/philipp-project/ultr-cm-vs-ips
    config_sources:
    - path: hydra.conf
      schema: pkg
      provider: hydra
    - path: /home/sgupta/philipp-project/ultr-cm-vs-ips/config
      schema: file
      provider: main
    - path: ''
      schema: structured
      provider: schema
    output_dir: ???
    choices:
      model: ips
      simulation: graded-pbm
      baseline: lgbm
      data: istella
      hyperparameter: ips_istella
      hydra/env: default
      hydra/callbacks: null
      hydra/job_logging: default
      hydra/hydra_logging: default
      hydra/hydra_help: default
      hydra/help: default
      hydra/sweeper: basic
      hydra/launcher: submitit_slurm
      hydra/output: default
  verbose: false
experiment:
  name: position_bias_strength
random_state: 0
trainer:
  _target_: pytorch_lightning.Trainer
  max_epochs: 200
  accelerator: auto
  logger:
  - _target_: src.logger.LocalLogger
  callbacks:
  - _target_: pytorch_lightning.callbacks.EarlyStopping
    monitor: val_loss
    patience: 5
train_loader:
  _target_: torch.utils.data.DataLoader
  dataset: ???
  batch_size: 50
  shuffle: true
val_test_loader:
  _target_: torch.utils.data.DataLoader
  dataset: ???
  batch_size: 500
  shuffle: false
data:
  _target_: src.data.Istella
  name: Istella-S
  fold: 1
  n_features: 220
  pipeline:
    _target_: src.data.preprocessing.Pipeline
    normalize:
    - _target_: src.data.preprocessing.ClipNormalize
      max_value: 1000000000.0
    - _target_: src.data.preprocessing.Log1pNormalize
    truncate:
    - _target_: src.data.preprocessing.StratifiedTruncate
      max_length: ${data.n_results}
      random_state: ${random_state}
    filter: []
  n_results: 147
baseline:
  _target_: src.baseline.LightGBMRanker
  name: LightGBM
  objective: lambdarank
  boosting_type: gbdt
  metric: ndcg
  n_estimators: 100
  n_leaves: 31
  learning_rate: 0.1
  early_stopping_patience: 10
  random_state: ${random_state}
simulation:
  simulator:
    _target_: src.simulation.Simulator
    baseline_model: ???
    user_model:
      _target_: src.simulation.GradedPBM
      position_bias: 1.0
      noise: 0.1
  n_sessions: 100000000
  aggregate_clicks: true
model:
  _target_: src.model.IPS
  name: IPS
  layers:
  - 512
  - 256
  - 128
  dropouts:
  - 0
  - 0.1
  - 0.1
  activation:
    _target_: torch.nn.ELU
  n_results: ${data.n_results}
  n_features: ${data.n_features}
  loss:
    _target_: src.loss.BinaryCrossEntropyWithLogits
  optimizer: adam
  learning_rate: 0.001
  position_bias: 1.0
